//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using robotlegs.bender.framework.api;

namespace robotlegs.bender.framework.impl
{
	/// <summary>
	/// Pins objects in memory
	/// </summary>
	public class Pin: IPinEvent
	{
		/*============================================================================*/
		/* Public Properties                                                          */
		/*============================================================================*/

		public event Action<object> Detained;

		public event Action<object> Released;

		/*============================================================================*/
		/* Private Properties                                                         */
		/*============================================================================*/
		
		private Dictionary<object, bool>_instances = new Dictionary<object, bool>();

		/*============================================================================*/
		/* Public Functions                                                           */
		/*============================================================================*/

		/// <summary>
		/// Pin an object in memory
		/// </summary>
		/// <param name="instance">Instance to pin</param>
		public void Detain(object instance)
		{
			if (!_instances.ContainsKey(instance))
			{
				_instances[instance] = true;
				if (Detained != null)
					Detained (instance);
			}
		}

		/// <summary>
		/// Unpins an object
		/// </summary>
		/// <param name="instance">Instance to unpin</param>
		public void Release(object instance)
		{
			if (_instances.ContainsKey(instance))
			{
				_instances.Remove(instance);
				if (Released != null)
					Released (instance);
			}
		}

		/// <summary>
		/// Removes all pins
		/// </summary>
		public void ReleaseAll()
		{
			object[] instancesKeys = new object[_instances.Keys.Count];
			_instances.Keys.CopyTo (instancesKeys, 0);
			foreach (object instance in instancesKeys)
			{
				Release(instance);
			}
		}
	}
}

