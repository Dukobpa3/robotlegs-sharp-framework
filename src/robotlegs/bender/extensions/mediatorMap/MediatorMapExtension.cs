//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using robotlegs.bender.framework.api;
using robotlegs.bender.extensions.mediatorMap.impl;
using robotlegs.bender.extensions.viewManager.api;
using robotlegs.bender.extensions.mediatorMap.api;

namespace robotlegs.bender.extensions.mediatorMap
{
	public class MediatorMapExtension : IExtension
	{
		/*============================================================================*/
		/* Private Properties                                                         */
		/*============================================================================*/
		
		private IInjector _injector;
		
		private MediatorMap _mediatorMap;
		
		private IViewManager _viewManager;
		
		/*============================================================================*/
		/* Public Functions                                                           */
		/*============================================================================*/

		public void Extend(IContext context)
		{
			context.BeforeInitializing(BeforeInitializing)
				.BeforeDestroying(BeforeDestroying)
				.WhenDestroying(WhenDestroying);
			_injector = context.injector;
			_injector.Map (typeof(IMediatorMap)).ToSingleton (typeof(MediatorMap));
		}
		
		/*============================================================================*/
		/* Private Functions                                                          */
		/*============================================================================*/

		private void BeforeInitializing()
		{
			_mediatorMap = _injector.GetInstance(typeof(IMediatorMap)) as MediatorMap;
			_viewManager = _injector.GetInstance(typeof(IViewManager)) as IViewManager;
			if (_viewManager != null)
			{
				_viewManager.AddViewHandler (_mediatorMap);
			}
		}
		
		private void BeforeDestroying()
		{
			_mediatorMap.UnmediateAll ();
			if (_injector.SatisfiesDirectly (typeof(IViewManager))) 
			{
				_viewManager = _injector.GetInstance (typeof(IViewManager)) as IViewManager;
				_viewManager.RemoveViewHandler (_mediatorMap);
			}
		}
		
		private void WhenDestroying()
		{
			if (_injector.SatisfiesDirectly (typeof(IMediatorMap)))
			{
				_injector.Unmap (typeof(IMediatorMap));
			}
		}
	}
}

