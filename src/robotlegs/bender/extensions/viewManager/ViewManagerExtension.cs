//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using robotlegs.bender.framework.api;
using robotlegs.bender.extensions.viewManager.impl;
using robotlegs.bender.extensions.viewManager.api;


namespace robotlegs.bender.extensions.viewManager
{
	public class ViewManagerExtension : IExtension
	{
		/*============================================================================*/
		/* Private Static Properties                                                  */
		/*============================================================================*/

		// Really? Yes, there can be only one.
		private static ContainerRegistry _containerRegistry;

		/*============================================================================*/
		/* Private Properties                                                         */
		/*============================================================================*/

		private IInjector _injector;

		private IViewManager _viewManager;

		/*============================================================================*/
		/* Public Functions                                                           */
		/*============================================================================*/

		public void Extend (IContext context)
		{
			context.WhenInitializing(WhenInitializing);
			context.WhenDestroying(WhenDestroying);

			_injector = context.injector;

			// Just one Container Registry
			if (_containerRegistry == null)
			{
				_containerRegistry = new ContainerRegistry ();
				ViewNotifier.SetRegistry (_containerRegistry);
			}
			_injector.Map(typeof(ContainerRegistry)).ToValue(_containerRegistry);
			if(_injector.HasDirectMapping(typeof(IParentFinder)))
			{
				_injector.Unmap (typeof(IParentFinder));
			}
			_injector.Map(typeof(IParentFinder)).ToValue(_containerRegistry);

			// But you get your own View Manager
			_injector.Map(typeof(IViewManager)).ToSingleton(typeof(ViewManager));
		}

		/*============================================================================*/
		/* Private Functions                                                          */
		/*============================================================================*/

		private void WhenInitializing()
		{
			_viewManager = _injector.GetInstance(typeof(IViewManager)) as IViewManager;
		}

		private void WhenDestroying()
		{
			_viewManager.RemoveAllHandlers();
			_injector.Unmap(typeof(IViewManager));
		}
	}
}

